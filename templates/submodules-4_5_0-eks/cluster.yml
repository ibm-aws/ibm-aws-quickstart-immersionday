AWSTemplateFormatVersion: '2010-09-09'
Description: Template for an IBM Cloud Pak for Data deployment.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label: 
          default: Services
        Parameters:
          - DB2OLTP
          - DV
          - WML
          - WSL
          - WKC
          - OpenScale
          - CDE
          - CA
          - Spark
          - DATASTAGE
      - Label: 
          default: API Configuration
        Parameters:
          - APIUsername
          - APIKey
          - RedhatPullSecret
      - Label: 
          default: Networking
        Parameters:
          - VPCID
          - VPCCIDR
          - PrivateSubnet1ID
          - PrivateSubnet2ID
          - PrivateSubnet3ID
          - PublicSubnet1ID
          - PublicSubnet2ID
          - PublicSubnet3ID
          - BootNodeAccessCIDR
          - ClusterNetworkCIDR
          - ClusterNetworkHostPrefix
          - ServiceNetworkCIDR
      - Label:
          default: AZ
        Parameters:
          - NumberOfAZs
          - AvailabilityZones
      - Label: 
          default: Instance Configuration
        Parameters:
          - KeyPairName
          - MasterInstanceType
          - MasterVolumeIops
          - MasterVolumeSize
          - MasterVolumeType
          - OCSInstanceType
          - ComputeInstanceType
          - ComputeVolumeIops
          - ComputeVolumeSize
          - ComputeVolumeType
          - NumberOfMaster
          - NumberOfCompute
      - Label:
          default: S3 Output
        Parameters:
          - ICPDDeploymentLogsBucketName
      - Label: 
          default: Cluster Configuration
        Parameters:
          - DomainName
          - ClusterName
          - StorageType
          - EnableFips
          - PrivateCluster
          - Namespace
          - EnableAutoscaler
          - PortworxClusterId
          - PortworxUserId
          - PortworxOsbEndpoint
      - Label: 
          default: Openshift Configuration
        Parameters:
          - OpenshiftVersion
          - OpenshiftUsername
          - OpenshiftPassword
          - LicenseAgreement
          - CPDExternalRegistry
Parameters:
  DB2OLTP:
    Description: >-
       Choose yes to install the DB2OLTP service.
    Type: String
    AllowedValues:
      - "no"
      - "yes"
    Default: "yes"
  DV:
    Description: >-
       Choose yes to install the Data Virtualization service.
    Type: String
    AllowedValues:
      - "no"
      - "yes"
    Default: "yes"
  WML:
    Description: >-
       Choose yes to install the Watson Machine Learning service.
    Type: String
    AllowedValues:
      - "no"
      - "yes"
    Default: "yes"
  WSL:
    Description: >-
       Choose yes to install the Watson Studio service.
    Type: String
    AllowedValues:
      - "no"
      - "yes"
    Default: "yes"
  WKC:
    Description: >-
       Choose yes to install the Watson Knowledge Catalog service.
    Type: String
    AllowedValues:
      - "no"
      - "yes"
    Default: "yes"
  OpenScale:
    Description: >-
       Choose yes to install the Watson OpenScale and Watson Machine Learning services.
    Type: String
    AllowedValues:
      - "no"
      - "yes"
    Default: "yes"
  CDE:
    Description: >-
       Choose yes to install the Cognos Dashboard Engine service.
    Type: String
    AllowedValues:
      - "no"
      - "yes"
    Default: "yes"
  CA:
    Description: >-
       Choose yes to install the Cognos Analytics service.
    Type: String
    AllowedValues:
      - "no"
      - "yes"
    Default: "yes"
  Spark:
    Description: >-
       Choose yes to install the Analytics Engine powered by Apache Spark service.
    Type: String
    AllowedValues:
      - "no"
      - "yes"
    Default: "no"
  DATASTAGE:
    Description: >-
       Choose yes to install the Datastage.
    Type: String
    AllowedValues:
      - "no"
      - "yes"
    Default: "yes"    
  APIUsername:
    Description: >-
       The IBM Cloud Pak for Data user name to access IBM Container Registry.
    Type: String
    Default: "cp"
  APIKey:
    Description: >-
       The IBM Cloud Pak for Data API key to access IBM Container Registry.
    Type: String 
    NoEcho: 'true'
  KeyPairName:
    Description: The name of an existing public/private key pair, which allows you
      to securely connect to your instance after it launches.
    Type: AWS::EC2::KeyPair::KeyName
  PrivateSubnet1ID:
    Description: The ID of the private subnet in Availability Zone 1 for the workload (e.g., subnet-a0246dcd).
    Type: String
    Default: "subnet-05c7d2d610d4db25f"
  PrivateSubnet2ID:
    Description: The ID of the private subnet in Availability Zone 2 for the workload (e.g., subnet-b1f432cd).
    Type: String
    Default: "subnet-015bca0698e9b4c41"
  PrivateSubnet3ID:
    Description: The ID of the private subnet in Availability Zone 3 for the workload (e.g., subnet-b1f4a2cd).
    Type: String
    Default: "subnet-03ed7835a97324708"
  PublicSubnet1ID:
    Description: The ID of the public subnet in Availability Zone 1 for the ELB load balancer (e.g., subnet-9bc642ac).
    Type: String
    Default: "subnet-068bc9661bea107d1"
  PublicSubnet2ID:
    Description: The ID of the public subnet in Availability Zone 2 for the ELB load balancer (e.g., subnet-e3246d8e).
    Type: String
    Default: "subnet-05a6043f88f7c2461"
  PublicSubnet3ID:
    Description: The ID of the public subnet in Availability Zone 3 for the ELB load balancer (e.g., subnet-e324ad8e).
    Type: String
    Default: "subnet-0a3646c21243f87f9"
  BootNodeAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: The CIDR IP range that is permitted to access boot node instance. We recommend that you set this value to a trusted IP range. The value `0.0.0.0/0` permits all IP addresses to access. Additional values can be added post-deployment from the Amazon EC2 console.
    Type: String
    Default: 0.0.0.0/0
  ClusterNetworkCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: The Cluster Network CIDR IP range that is used as IP address pools for pods.  
    Type: String
    Default: 10.128.0.0/14  
  ClusterNetworkHostPrefix:
    Description: Cluster network host prefix.
    Type: Number
    Default: 23
  ServiceNetworkCIDR: 
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Description: The service network CIDR IP range.
    Type: String
    Default: 172.30.0.0/16
  RedhatPullSecret:
    Description: Your Red Hat Network (RHN) pull secret(e.g., s3://my-bucket/path/to/pull_secret.json).
    Type: String
    Default: "s3://cp4d-ocp-cloudformation-dev/pull-secrets/pull_secret.json"
  VPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/16
    Description: The CIDR block of the existing VPC.
    Type: String
  VPCID:
    Description: The ID of your existing VPC for deployment.
    Type: AWS::EC2::VPC::Id
    Default: vpc-03738f32953df603f
  MasterInstanceType:
    Default: m5.xlarge
    AllowedValues:
      - m5.xlarge
      - m5.2xlarge
      - m5d.xlarge
      - m5d.2xlarge
    ConstraintDescription: Must contain valid instance type
    Description: The EC2 instance type for the OpenShift master instances.
    Type: String
  MasterVolumeIops:
    Default: 4000
    Type: Number
    Description: Master instance volume number of IOPS.
  MasterVolumeSize:
    Default: 300
    Type: Number
    Description: Master instance volume size in GB.
  MasterVolumeType:
    Default: io1
    Type: String
    Description: Master volumne type.
    AllowedValues:
      - io1
      - gp2
      - gp3
  OCSInstanceType:
    Default: m5.4xlarge
    AllowedValues:
      - m4.4xlarge
      - m4.8xlarge
      - m5.4xlarge
      - m5.8xlarge
      - m5.12xlarge
      - c5.8xlarge
      - c5.12xlarge
      - c5.9xlarge
      - r5.4xlarge
      - r5.8xlarge
      - r5.12xlarge
      - m4.10xlarge
      - c4.8xlarge
    ConstraintDescription: Must contain valid instance type
    Description: Update this value if Storage type selected is OCS. The EC2 instance type for the OpenShift Container Storage instances.
    Type: String
  ComputeInstanceType:
    Default: m5.4xlarge
    AllowedValues:
      - m5.4xlarge
      - m5.8xlarge
      - m5.12xlarge
      - m5.24xlarge
      - m5a.4xlarge
      - m5a.8xlarge
      - m5a.12xlarge
      - m5a.24xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.12xlarge
      - c5.18xlarge
      - c5.24xlarge
      - r5.4xlarge
      - r5.9xlarge
      - r5.12xlarge
      - r5.18xlarge
      - r5.24xlarge
    ConstraintDescription: Must contain valid instance type
    Description: The EC2 instance type for the OpenShift compute instances.
    Type: String
  ComputeVolumeIops:
    Default: 2000
    Type: Number
    Description: Worker volume IOPS.
  ComputeVolumeSize:
    Default: 300
    Type: Number
    Description: Worker volume size in GB.
  ComputeVolumeType:
    Default: io1
    Type: String
    Description: Worker volume type.
    AllowedValues:
      - io1
      - gp2
      - gp3
  NumberOfAZs:  
    Default: 3
    Description: >-
      The number of Availability Zones to be used for the deployment. Keep in mind that some regions may be limited to two Availability Zones. For a single IBM Cloud Pak for Data cluster to be highly available, three Availability Zones are needed to avoid a single point of failure when using three, five, or seven master nodes. With fewer than three Availability Zones, one of the AZs will have more master nodes.
    Type: Number
    AllowedValues:
    - 1
    - 3  
  AvailabilityZones:
    Description: The list of Availability Zones to use for the subnets in the VPC. The Template uses one or three Availability Zones and preserves the logical order you specify.
    Type: List<AWS::EC2::AvailabilityZone::Name>
    Default: us-east-2a,us-east-2b,us-east-2c
  NumberOfMaster:
    Default: '3'
    Description: The desired capacity for the OpenShift master instances. Must be an odd number.A minimum of 3 is required.
    Type: String
    AllowedPattern: '^[3579]$|(^[3-9]+[3579]$)'
  NumberOfCompute:
    Default: '10'
    Description: The desired capacity for the OpenShift compute instances. Minimum of 3 nodes required. If the number of compute instances exceeds your Red Hat entitlement limits or AWS instance limits, the stack will fail. Choose a number that is within your limits.
    Type: Number
  ICPDDeploymentLogsBucketName:
    Description: 'The name of the S3 bucket where IBM Cloud Pak for Data deployment logs are to be exported. The deployment logs provide a record of the boot strap scripting actions and are useful for problem determination if the deployment fails in some way.'
    Type: String
    Default: 'cp4d-ocp-cloudformation-dev'
  DomainName:
    Description: 'Amazon Route53 base domain configured for your OpenShift Container Platform cluster. Name must consist of lower case alphanumeric characters and must start and end with an alphanumeric character.'
    Type: String
    Default: "ibmworkshops.com"
  ClusterName:
    Default: "immersionday-cluster"
    Description: Custom cluster name for kubernetes.io/cluster/tags.
    Type: String
    AllowedPattern: ^[0-9a-z-]*$
  StorageType:
    Description: Openshift Container Storage is currently the only supported storage option.  
    Type: String
    AllowedValues:
      - "OCS"
      - "PortworxEnterprise"
      - "PortworxEssentials"
#      - "PortworxIBM"
    Default: "OCS"
  PortworxClusterId: 
    Description: Portworx storage cluster id.
    Type: String
    Default: ""
  PortworxUserId:
    Description: Portworx cluster user id.
    Type: String
    Default: ""
  PortworxOsbEndpoint:
    Description: Portworx osb endpoint.
    Type: String
    Default: ""
  EnableFips:
    Description: Enable Fips for Openshift
    Type: String
    AllowedValues:
      - "false"
      - "true"
    Default: "false"
  PrivateCluster:  
    Description: To Deploy a Private cluster select true and false for Public cluster
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Default: "false"
  OpenshiftVersion:
    Description: Choose Openshift Version
    Type: String
    Default: "4.10.22"
  OpenshiftUsername:
    Description: Username to be used to login to Openshift Console.
    Type: String
    Default: "ocsadmin"
  OpenshiftPassword:
    Description: Password to be used to login to Openshift and Cloud Pak for Data Console.
    Type: String
    NoEcho: 'true'
    Default: "ocsadmin"
  EnableAutoscaler:
    Description: Enable autoscaling
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
  LicenseAgreement:
    Description: >-
      I have read and agreed to the license terms for IBM Cloud Pak for Data that were provided to me at time of purchase.
    Type: String
    Default: 'I agree'
    AllowedValues:
      - I agree
      - '-'
    ConstraintDescription: must answer 'I agree'
  Namespace:
    Description: >-
      The OpenShift project that will be created for deploying Cloud Pak for Data. It can be any lowercase string.
    Type: String
    AllowedPattern: '^[a-z0-9_\-]+$'
    Default: "zen"
  CPDExternalRegistry:
    Description: URL to external registry for CPD install. CPD images must already exist in the repo
    Type: String
    Default: "cp.icr.io"

Mappings:
  AWSAMIRegionMap:
    us-east-1:
      BootNodeAmiId: ami-06640050dc3f556bb
      COREOSAmiId: ami-0b35795bcab04ee70
    us-east-2:
      BootNodeAmiId: ami-092b43193629811af
      COREOSAmiId: ami-0c17b13bb8b268411
    us-west-1:
      BootNodeAmiId: ami-0186e3fec9b0283ee
      COREOSAmiId: ami-004de02e4e2bba5f2
    us-west-2:
      BootNodeAmiId: ami-08970fb2e5767e3b8
      COREOSAmiId: ami-0237df7fc4ba6a5cc
    ap-south-1:
      BootNodeAmiId: ami-05c8ca4485f8b138a
      COREOSAmiId: ami-02b81ab6d01174430
    ap-northeast-3:
      BootNodeAmiId: ami-044921b7897a7e0da
      COREOSAmiId: ami-03450c8fc4ff0f7bd
    ap-northeast-2:
      BootNodeAmiId: ami-06c568b08b5a431d5
      COREOSAmiId: ami-087c3504f536820f8
    ap-southeast-1:
      BootNodeAmiId: ami-051f0947e420652a9
      COREOSAmiId: ami-099b3006ba35122c6
    ap-southeast-2:
      BootNodeAmiId: ami-0808460885ff81045
      COREOSAmiId: ami-04d9e06d3edd4b78c
    ap-northeast-1:
      BootNodeAmiId: ami-0f903fb156f24adbf
      COREOSAmiId: ami-04a04d42202f5dffb
    ca-central-1:
      BootNodeAmiId: ami-0c3d3a230b9668c02
      COREOSAmiId: ami-0712dffd5af06d6a0
    eu-central-1:
      BootNodeAmiId: ami-0e7e134863fac4946
      COREOSAmiId: ami-0b911f8bcf1f05a47
    eu-west-1:
      BootNodeAmiId: ami-0f0f1c02e5e4d9d9f
      COREOSAmiId: ami-0cd860942047eaf85
    eu-west-2:
      BootNodeAmiId: ami-035c5dc086849b5de
      COREOSAmiId: ami-057df328de60ac464
    eu-west-3:
      BootNodeAmiId: ami-0460bf124812bebfa
      COREOSAmiId: ami-0e57008c4a59dbf99
    eu-north-1:
      BootNodeAmiId: ami-06a2a41d455060f8b
      COREOSAmiId: ami-06c6466f9944aee66
    sa-east-1:
      BootNodeAmiId: ami-0c1b8b886626f940c
      COREOSAmiId: ami-01e07e22429c5bdef

Rules: 
  LicenseAgreementRule:
    Assertions:
    - Assert:
        Fn::Contains:
        - - I agree
        - Ref: LicenseAgreement
      AssertDescription: User must agree to the terms of the license agreement.    

  SubnetsInVPC:
    Assertions:
      - Assert: !EachMemberIn
          - !ValueOfAll
            - AWS::EC2::Subnet::Id
            - VpcId
          - !RefAll 'AWS::EC2::VPC::Id'
        AssertDescription: All subnets must in the VPC      

Conditions:
  3AZCondition: !Equals [!Ref NumberOfAZs, 3]
  AcceptLicense: !Equals [!Ref LicenseAgreement, 'I agree']
  OCSCondition: !Equals [!Ref StorageType, 'OCS']
  PortworxEnterpriseCondition: !Equals [!Ref StorageType, 'PortworxEnterprise']
  PortworxEssentialsCondition: !Equals [!Ref StorageType, 'PortworxEssentials']
#  EnablePortworxIBM: !Equals [!Ref StorageType, 'PortworxIBM']

Resources:
  CPDIAMUser:
    Type: 'AWS::IAM::User'
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
  CPDIAMUserAccessKey:
    Type: 'AWS::IAM::AccessKey'
    Properties:
      UserName: !Ref CPDIAMUser
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      Path: /
      Policies:
        - PolicyName: lambda-cleanUpLambda
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:SendCommand
                  - ssm:PutParameter
                  - ssm:GetParameter
                  - ssm:DeleteParameter
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - logs:FilterLogEvents
                Resource:
                  - '*' 
#  CPDSecret:
#    Type: "AWS::SecretsManager::Secret"
#    Properties:
#      SecretString: !Sub '{"apikey":"${APIKey}", "password":"${OpenshiftPassword}", "username":"admin"}'

  OpenshiftSecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      SecretString: !Sub '{"ocpUsername":"${OpenshiftUsername}", "ocpPassword":"${OpenshiftPassword}"}'

  BootNodeIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service:
            - "ec2.amazonaws.com"
          Action:
          - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess
      Policies:
      - PolicyName: bootnode-policy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action: "ec2:Describe*"
            Resource: "*"
          - Effect: "Allow"
            Action: "ec2:AttachVolume"
            Resource: "*"
          - Effect: "Allow"
            Action: "ec2:DetachVolume"
            Resource: "*"
          - Effect: "Allow"
            Action: "route53:*"
            Resource: "*"
          - Effect: "Allow"
            Action:
            - "secretsmanager:GetSecretValue"
            - "secretsmanager:UpdateSecret"
            - "secretsmanager:CreateSecret"
            Resource: "*"
          - Effect: "Allow"
            Action: "s3:ListBucket"
            Resource: !Sub arn:aws:s3:::${ICPDDeploymentLogsBucketName}
          - Effect: "Allow"
            Action: "s3:PutObject"
            Resource: !Sub arn:aws:s3:::${ICPDDeploymentLogsBucketName}/*
          - Effect: Allow
            Action:
            - ssm:SendCommand
            - ssm:PutParameter
            - ssm:GetParameter
            Resource:
            - '*'  

  OpenshiftURL:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "${AWS::StackName}-OpenshiftURL"
      Type: String
      Value: !Sub "https://console-openshift-console.apps.${ClusterName}.${DomainName}"

  CPDURL:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "${AWS::StackName}-CPDURL"
      Type: String
      Value: !Sub "https://cpd-${Namespace}.apps.${ClusterName}.${DomainName}"

  BootnodeInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
      - Ref: "BootNodeIamRole"

  BootnodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster Bootnode Security Group
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref BootNodeAccessCIDR
      VpcId: !Ref VPCID

  AWSCredentialSecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      SecretString: !Sub 
        - '{"aws_secret_access_key":"${CPDIAMUserAccessKey}", "aws_access_key_id":"${CPDIAMUserSecret}"}'
        - {CPDIAMUserAccessKey: !Ref CPDIAMUserAccessKey, CPDIAMUserSecret: !GetAtt CPDIAMUserAccessKey.SecretAccessKey}

  BootnodeInstance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          Required:
            - StackPropertiesFile
        StackPropertiesFile:
          files:
            /root/mystack.props:
              content: !Sub |
                AWS_REGION=${AWS::Region}
                AWS_STACKID="${AWS::StackId}"
                AWS_STACKNAME="${AWS::StackName}"
              mode: '000644'
              owner: root
              group: root
            /home/ec2-user/destroy.sh:
              content: !Sub |
                echo "$1 - Destroy"
                sudo /home/ec2-user/cp4d-deployment/selfmanaged-openshift/aws/installer-files/openshift-install destroy cluster --dir=/home/ec2-user/cp4d-deployment/selfmanaged-openshift/aws/installer-files --log-level=info
                aws ssm put-parameter --name $1"_CleanupStatus" --type "String" --value "READY" --overwrite
              mode: '000777'
              owner: ec2-user
              group: ec2-user
            /root/.aws/config:
              content: !Sub |
                [default]
                region=${AWS::Region}
              mode: '000600'
              owner: root
              group: root
            /root/.aws/credentials:
              content: 
                !Sub 
                - |  
                  [default]
                  aws_access_key_id=${CPDIAMUserAccessKey}
                  aws_secret_access_key=${CPDIAMUserSecret}
                - 
                  CPDIAMUserAccessKey: !Ref CPDIAMUserAccessKey 
                  CPDIAMUserSecret: !GetAtt CPDIAMUserAccessKey.SecretAccessKey
              mode: '000600'
              owner: root
              group: root

    Properties:
      KeyName: !Ref 'KeyPairName'
      ImageId: !FindInMap [AWSAMIRegionMap, !Ref "AWS::Region", BootNodeAmiId]
#      ImageId: ami-092b43193629811af
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 50
            VolumeType: gp2    
      IamInstanceProfile: !Ref BootnodeInstanceProfile
      Tags:
        - Key: Name
          Value: 
            !Sub
            - "${ClusterName}-bootnode"
            - ClusterName: !Ref ClusterName 
      InstanceType: t3.large 
      NetworkInterfaces:
      - GroupSet:
        - !Ref BootnodeSecurityGroup
        AssociatePublicIpAddress: true
        DeviceIndex: '0'
        DeleteOnTermination: true
        SubnetId: !Ref PublicSubnet1ID  
      UserData:
        Fn::Base64:
          !Sub 
          - |
            #!/bin/bash -x
            
            #Added the next 5 lines to include required tools for the installation of CP4D
            sudo yum update
            sudo yum install -y git      
            sudo yum install -y yum-utils
            sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
            sudo yum -y install terraform
           
            
            ### START: install podman ###
            sudo yum install httpd-tools -y
            sudo curl -L -o /etc/yum.repos.d/devel:kubic:libcontainers:stable.repo https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/CentOS_7/devel:kubic:libcontainers:stable.repo
            sudo yum install yum-plugin-copr
            sudo yum copr enable lsm5/container-selinux -y
            sudo yum install podman -y
            podman version
            
            yum install python36 -y
            yum install wget -y
            ### END: install podman ###


            git clone https://github.com/aws-quickstart/quickstart-linux-utilities.git
            sed -i "s/aws-cfn-bootstrap-latest.tar.gz/aws-cfn-bootstrap-py3-latest.tar.gz/g" /quickstart-linux-utilities/quickstart-cfn-tools.source 
            export P=/quickstart-linux-utilities/quickstart-cfn-tools.source
            source $P
            
            qs_bootstrap_pip || qs_err " pip bootstrap failed "
            qs_aws-cfn-bootstrap || qs_err "cfn bootstrap failed"
            pip3 install awscli  &> /var/log/userdata.awscli_install.log || qs_err " awscli install failed "
            /usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource BootnodeInstance --configsets Required --region ${AWS::Region}
            #/opt/aws/apitools/cfn-init -v --stack ${AWS::StackName} --resource BootnodeInstance --configsets Required --region ${AWS::Region}

            cd /tmp
            qs_retry_command 10 wget https://s3-us-west-1.amazonaws.com/amazon-ssm-us-west-1/latest/linux_amd64/amazon-ssm-agent.rpm
            qs_retry_command 10 yum install -y ./amazon-ssm-agent.rpm
            systemctl start amazon-ssm-agent
            systemctl enable amazon-ssm-agent
            rm -f ./amazon-ssm-agent.rpm

            #Added the next 4 lines to include required tools for the installation of CP4D
            wget "https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64"
            mv jq-linux64 jq
            sudo chmod +x jq
            sudo mv jq /usr/local/bin
            sudo cp /usr/local/bin/jq /usr/bin/

            #Added the next 5 lines to include required tools for the installation of CP4D
            wget "https://mirror.openshift.com/pub/openshift-v4/clients/ocp/${OpenshiftVersion}/openshift-client-linux-${OpenshiftVersion}.tar.gz"
            tar -xvf openshift-client-linux-${OpenshiftVersion}.tar.gz
            
            sudo chmod u+x oc kubectl
            sudo mv oc /usr/local/bin
            sudo cp /usr/local/bin/oc /usr/bin/

            sudo mv kubectl /usr/local/bin
            sudo cp /usr/local/bin/kubectl /usr/bin/

            export ICPDInstallationCompletedURL='${ICPDInstallationCompletedHandle}'
            export AWS_REGION=${AWS::Region}
            export AWS_STACKID=${AWS::StackId}
            export AWS_STACKNAME=${AWS::StackName}

            chmod +x /home/ec2-user/destroy.sh

            ssh-keygen -t rsa -b 4096 -f /home/ec2-user/.ssh/id_rsa -q -N ""

            #Added the next 3 lines to include required tools for the installation of CP4D
            cd /home/ec2-user
            git clone https://github.com/IBM/cp4d-deployment.git
            #git clone -b 'Release_CPD_4.5.0' https://github.com/IBM/cp4d-deployment.git
            cd /home/ec2-user/cp4d-deployment/selfmanaged-openshift/aws
            chown -fR ec2-user:ec2-user /home/ec2-user/cp4d-deployment

            cd /home/ec2-user/cp4d-deployment/selfmanaged-openshift/aws

            wget https://ibm-aws-immersion-day.s3.us-east-2.amazonaws.com/templates/create-db2-instance.sh
            cp ./create-db2-instance.sh   /home/ec2-user/cp4d-deployment/selfmanaged-openshift/aws/create-db2-instance.sh
            wget https://ibm-aws-immersion-day.s3.us-east-2.amazonaws.com/templates/cogconfig.sh
            cp ./cogconfig.sh   /home/ec2-user/cp4d-deployment/selfmanaged-openshift/aws/cogconfig.sh
            wget https://ibm-aws-immersion-day.s3.us-east-2.amazonaws.com/templates/db.yaml
            cp ./db.yaml   /home/ec2-user/cp4d-deployment/selfmanaged-openshift/aws/db.yaml
            wget https://ibm-aws-immersion-day.s3.us-east-2.amazonaws.com/templates/domaindelegation.sh
            cp ./domaindelegation.sh    /home/ec2-user/cp4d-deployment/selfmanaged-openshift/aws/domaindelegation.sh
            wget https://ibm-aws-immersion-day.s3.us-east-2.amazonaws.com/templates/manta-mirror-config.yaml
            cp ./manta-mirror-config.yaml   /home/ec2-user/cp4d-deployment/selfmanaged-openshift/aws/manta-mirror-config.yaml

            chmod +x /home/ec2-user/cp4d-deployment/selfmanaged-openshift/aws/create-db2-instance.sh
            chmod +x /home/ec2-user/cp4d-deployment/selfmanaged-openshift/aws/cogconfig.sh
            chmod +x /home/ec2-user/cp4d-deployment/selfmanaged-openshift/aws/db.yaml
            chmod +x /home/ec2-user/cp4d-deployment/selfmanaged-openshift/aws/domaindelegation.sh
            /bin/bash  /home/ec2-user/cp4d-deployment/selfmanaged-openshift/aws/domaindelegation.sh ${DomainName}

            export HOME=~

            aws s3 cp ${RedhatPullSecret} ./pull-secret

            echo "openshift_pull_secret_file_path=\"./pull-secret\"" > terraform_vars.tfvars

            echo "region=\"${AWS::Region}\"" >> terraform_vars.tfvars
            echo "access_key_id=\"${CPDIAMUserAccessKey}\"" >> terraform_vars.tfvars
            echo "secret_access_key=\"${CPDIAMUserSecret}\"" >> terraform_vars.tfvars
            echo "new_or_existing_vpc_subnet=\"exist\"" >> terraform_vars.tfvars

            echo "vpc_id=\"${VPCID}\"" >> terraform_vars.tfvars
            echo "master_subnet1_id=\"${PublicSubnet1ID}\"" >> terraform_vars.tfvars
            echo "master_subnet2_id=\"${PublicSubnet2ID}\"" >> terraform_vars.tfvars
            echo "master_subnet3_id=\"${PublicSubnet3ID}\"" >> terraform_vars.tfvars
            echo "worker_subnet1_id=\"${PrivateSubnet1ID}\"" >> terraform_vars.tfvars
            echo "worker_subnet2_id=\"${PrivateSubnet2ID}\"" >> terraform_vars.tfvars
            echo "worker_subnet3_id=\"${PrivateSubnet3ID}\"" >> terraform_vars.tfvars
            echo "availability_zone1=\"${AvailabilityZone1}\"" >> terraform_vars.tfvars
            echo "availability_zone2=\"${AvailabilityZone2}\"" >> terraform_vars.tfvars
            echo "availability_zone3=\"${AvailabilityZone3}\"" >> terraform_vars.tfvars
            
            echo "enable_permission_quota_check=false" >> terraform_vars.tfvars
            echo "cluster_name=\"${ClusterName}\"" >> terraform_vars.tfvars
            echo "az=\"${AZ}\"" >> terraform_vars.tfvars

            echo "worker_instance_type=\"${ComputeInstanceType}\"" >> terraform_vars.tfvars
            echo "worker_instance_volume_iops=\"${ComputeVolumeIops}\"" >> terraform_vars.tfvars
            echo "worker_instance_volume_size=\"${ComputeVolumeSize}\"" >> terraform_vars.tfvars
            echo "worker_instance_volume_type=\"${ComputeVolumeType}\"" >> terraform_vars.tfvars
            echo "worker_replica_count=\"${NumberOfCompute}\"" >> terraform_vars.tfvars
            echo "master_instance_type=\"${MasterInstanceType}\"" >> terraform_vars.tfvars
            echo "master_instance_volume_iops=\"${MasterVolumeIops}\"" >> terraform_vars.tfvars
            echo "master_instance_volume_size=\"${MasterVolumeSize}\"" >> terraform_vars.tfvars
            echo "master_instance_volume_type=\"${MasterVolumeType}\"" >> terraform_vars.tfvars
            echo "master_replica_count=\"${NumberOfMaster}\"" >> terraform_vars.tfvars
            echo "cluster_network_cidr=\"${ClusterNetworkCIDR}\"" >> terraform_vars.tfvars
            echo "cluster_network_host_prefix=\"${ClusterNetworkHostPrefix}\"" >> terraform_vars.tfvars
            echo "service_network_cidr=\"${ServiceNetworkCIDR}\"" >> terraform_vars.tfvars
            echo "private_cluster=\"${PrivateCluster}\"" >> terraform_vars.tfvars
            echo "public_ssh_key=\"`cat /home/ec2-user/.ssh/id_rsa.pub`\"" >> terraform_vars.tfvars
            echo "enable_fips=\"${EnableFips}\"" >> terraform_vars.tfvars
            echo "base_domain=\"${DomainName}\"" >> terraform_vars.tfvars

            echo "openshift_username=\"${OpenshiftUsername}\"" >> terraform_vars.tfvars
            echo "openshift_password=\"${OpenshiftPassword}\"" >> terraform_vars.tfvars
            echo "enable_autoscaler=\"${EnableAutoscaler}\"" >> terraform_vars.tfvars

            echo "storage_option=\"ocs\"" >> terraform_vars.tfvars
            echo "ocs={enable = "${EnableOCS}", ami_id = "\"${AMI_ID}\"", dedicated_node_instance_type = "\"${OCSInstanceType}\""}" >> terraform_vars.tfvars
            echo "efs={enable = "false"}" >> terraform_vars.tfvars
            echo "portworx_enterprise={enable = "${EnablePortworxEnterprise}", cluster_id = "\"${PortworxClusterId}\"", enable_encryption = "true"}" >> terraform_vars.tfvars
            echo "portworx_essentials={enable = "${EnablePortworxEssentials}", cluster_id = "\"${PortworxClusterId}\"", user_id = \""${PortworxUserId}"\", osb_endpoint=\""${PortworxOsbEndpoint}"\"}" >> terraform_vars.tfvars
            echo "accept_cpd_license=\"${LicenseAgreement}\"" >> terraform_vars.tfvars
            echo "cpd_external_registry=\"${CPDExternalRegistry}\"" >> terraform_vars.tfvars
            echo "cpd_external_username=\"${APIUsername}\"" >> terraform_vars.tfvars
            echo "cpd_api_key=\"${APIKey}\"" >> terraform_vars.tfvars
            echo "cpd_namespace=\"${Namespace}\"" >> terraform_vars.tfvars
            echo "openshift_version=\"${OpenshiftVersion}\"" >> terraform_vars.tfvars
            echo "cpd_platform=\"yes\"" >> terraform_vars.tfvars
            echo "cpd_version=\"4.5.0\"" >> terraform_vars.tfvars

            echo "db2_oltp=\"${DB2OLTP}\"" >> terraform_vars.tfvars
            echo "cognos_dashboard_embedded=\"${CDE}\"" >> terraform_vars.tfvars
            echo "cognos_analytics=\"${CA}\"" >> terraform_vars.tfvars
            echo "watson_ai_openscale=\"${OpenScale}\"" >> terraform_vars.tfvars
            echo "watson_studio=\"${WSL}\"" >> terraform_vars.tfvars
            echo "watson_machine_learning=\"${WML}\"" >> terraform_vars.tfvars
            echo "data_virtualization=\"${DV}\"" >> terraform_vars.tfvars
            echo "datastage=\"${DATASTAGE}\"" >> terraform_vars.tfvars

            echo "vpc_cidr=\"${VPCCIDR}\"" >> terraform_vars.tfvars

            export TF_LOG=DEBUG
            export TF_LOG_PATH=/home/ec2-user/cp4d-deployment/selfmanaged-openshift/aws/.trace.log

            terraform init -input=false
            terraform plan -out=tfplan -var-file=terraform_vars.tfvars
            terraform apply -input=false tfplan
            
            ecode=$?
            # *** START: commented out only for immersionday ***
            #aws s3 cp /home/ec2-user/cp4d-deployment/selfmanaged-openshift/aws/.trace.log s3://${ICPDDeploymentLogsBucketName}/cpd-trace.log || echo 'NOT_FOUND_TRACE_LOG';
            #aws s3 cp /var/log/cloud-init-output.log s3://${ICPDDeploymentLogsBucketName}/cpd-bootstrap.log || echo 'NOT_FOUND_CPD_BOOTSTRAP_LOG';
            #aws s3 cp /home/ec2-user/cp4d-deployment/selfmanaged-openshift/aws/terraform.tfstate s3://${ICPDDeploymentLogsBucketName}/cpd-terraform.tfstate || echo 'NOT_FOUND_TERRAFORM_TFSTATE';
            # *** END: commented out only for immersionday ***
            
            # *** START: configure manta repo for WKC ***

            oc apply -f /home/ec2-user/cp4d-deployment/selfmanaged-openshift/aws/manta-mirror-config.yaml
            if [ "${WKC}" == "yes" ]; then
              echo "watson_knowledge_catalog=\"${WKC}\"" >> terraform_vars.tfvars
              terraform plan -out=tfplan -var-file=terraform_vars.tfvars
              terraform apply -input=false tfplan
            fi

            # *** END: configure manta repo for WKC ***

            # *** START: setup DB2 and Cognos contain store ***

            if [ "${CA}" == "yes" ]; then
              /bin/bash /home/ec2-user/cp4d-deployment/selfmanaged-openshift/aws/create-db2-instance.sh
            fi
            
            # *** END: setup DB2 and Cognos contain store ***
            
            export CP4DPWD=$(oc extract secret/admin-user-details --keys=initial_admin_password --to=- -n ${Namespace})
            aws secretsmanager create-secret --name "cpdsecret-${ClusterName}" --description "CPD secrets for the cluster ${ClusterName}" --secret-string "{\"user\":\"admin\",\"password\":\"$CP4DPWD\"}" --region="${AWS::Region}" || echo 'UNABLE_TO_CREATE_CPD_SECRET'

            cp -rf ~/.kube/ /home/ec2-user/ || echo 'NOT_FOUND_DOT_KUBE';
            chown -R ec2-user:ec2-user /home/ec2-user/.kube || echo 'NOT_FOUND_DOT_KUBE';
            oc exec -it $(oc get pod -l component=usermgmt | tail -1 | cut -f1 -d\ ) -- bash -c "printf \"${OpenshiftPassword}\n\" | /usr/src/server-src/scripts/manage-user.sh --enable-user admin" || echo 'NOT_LOGIN_VIA_OC_DURING_EXEC';
            /usr/local/bin/cfn-signal --exit-code $ecode --id $AWS_STACKID  --data "See logs at ${ICPDDeploymentLogsBucketName}/cpd-bootstrap.log" $ICPDInstallationCompletedURL || /usr/bin/cfn-signal --exit-code $ecode --id $AWS_STACKID  --data "See logs at ${ICPDDeploymentLogsBucketName}/cpd-bootstrap.log" $ICPDInstallationCompletedURL
          -
            AMI_ID: !FindInMap [AWSAMIRegionMap, !Ref "AWS::Region", COREOSAmiId]
            CPDIAMUserAccessKey: !Ref CPDIAMUserAccessKey 
            CPDIAMUserSecret: !GetAtt CPDIAMUserAccessKey.SecretAccessKey
            LicenseAgreement: !If [ AcceptLicense, 'accept', 'reject']
            AZ: !If [ 3AZCondition , 'multi_zone', 'single_zone']
            AvailabilityZone1: !Select [0, !Ref AvailabilityZones]
            AvailabilityZone2: !If [ 3AZCondition, !Select [1, !Ref AvailabilityZones], ""]
            AvailabilityZone3: !If [ 3AZCondition, !Select [2, !Ref AvailabilityZones], ""]
            EnableOCS: !If [ OCSCondition, 'true', 'false' ]
            EnablePortworxEnterprise: !If [ PortworxEnterpriseCondition, 'true', 'false' ]
            EnablePortworxEssentials: !If [ PortworxEssentialsCondition, 'true', 'false'] 
  
  CleanUpLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import json
          import cfnresponse
          import os
          import traceback
          import time
          def handler(event, context):
              responseData = {}
              try:
                  print("event_obj:",json.dumps(event))
                  print(event['RequestType'])
                  if event['RequestType'] == 'Delete':
                    print("Run unsubscribe script")
                    ssm = boto3.client('ssm',region_name=os.environ['Region'])
                    instanceID = os.environ['BootNode']
                    storage = os.environ['Storage']
                    stackname = os.environ['StackName']
                    print(instanceID)
                    response = ssm.send_command(Targets=[{"Key":"instanceids","Values":[instanceID]}],
                            DocumentName="AWS-RunShellScript",
                            Parameters={"commands":["/home/ec2-user/destroy.sh %s" %(stackname)],
                                        "executionTimeout":["1200"],
                                        "workingDirectory":["/home/ec2-user"]},
                            Comment="Execute script in uninstall openshift",
                            TimeoutSeconds=120)
                    print(response)
                    current_status = "WAIT"
                    final_status = "READY"
                    parameterName = stackname+"_CleanupStatus"           
                    response = ssm.put_parameter(Name=parameterName,
                           Description="Waiting for CleanupStatus to be READY",
                           Value=current_status,
                           Type='String',
                           Overwrite=True)        
                    print(response)    
                    while(current_status!=final_status):
                      time.sleep(30) 
                      response = ssm.get_parameter(Name=parameterName)
                      parameter = response.get('Parameter')
                      current_status = parameter.get('Value')
                      print(current_status)
                    ssm.delete_parameter(Name=parameterName)    
              except Exception as e:
                print(e)
                traceback.print_exc()
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, '')
      Environment:
        Variables:
          Region: !Ref AWS::Region
          BootNode: !Ref BootnodeInstance
          Storage: !Ref StorageType
          StackName: !Ref AWS::StackName
      Handler: index.handler
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Runtime: python3.8
      Timeout: 600
             
  Cleanup :
    Type: Custom::Cleanup
    Properties:
      DependsOn: BootnodeInstance
      ServiceToken: !GetAtt 'CleanUpLambda.Arn'
 
  ICPDInstallationCompletedHandle:
    Type: AWS::CloudFormation::WaitConditionHandle  

  ICPDInstallationCompleted:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Count: 1
      Handle: !Ref ICPDInstallationCompletedHandle
      Timeout: '40000'  

Outputs:
  BootnodeInstanceId:
    Description: Bootnode Instance ID.
    Value: !Ref BootnodeInstance

  BootnodePublicIp:
    Description: The boot node public IP address.
    Value: !GetAtt BootnodeInstance.PublicIp

  OpenshiftURLValue:
    Description: The URL for the OpenShift UI.
    Value: !GetAtt OpenshiftURL.Value  
  
  ICPDWebClientURL :
    Description: CloudPak for Data web client URL.
    Value: !GetAtt CPDURL.Value

#  ICPDWebClientPassword :
#    Description: CloudPak for Data web client URL.
#    Value: !Ref CPDSecret

  ICPDWebClientPassword :
    Description: CloudPak for Data web client URL.
    Value: !Join 
        - "-"
        - - "cpdsecret"
          - !Ref ClusterName

  OpenshiftUsername:
    Description: OpenShift username secret.
    Value: !Ref OpenshiftSecret 

  OpenshiftPassword:
    Description: OpenShift password secret.
    Value: !Ref OpenshiftSecret 
