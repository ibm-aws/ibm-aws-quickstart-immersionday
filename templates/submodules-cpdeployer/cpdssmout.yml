AWSTemplateFormatVersion: '2010-09-09'
Description: 'test SSM parameters'
Parameters:
  ICPDDeploymentLogsBucketName:
    Description: 'The name of the S3 bucket where IBM Cloud Pak for Data deployment logs are to be exported. The deployment logs provide a record of the boot strap scripting actions and are useful for problem determination if the deployment fails in some way.'
    Type: String
    Default: 'cp4d-ocp-cloudformation-dev'
  VPCID:
    Description: The ID of your existing VPC for deployment.
    Type: AWS::EC2::VPC::Id
    Default: vpc-03738f32953df603f
  BootNodeAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: The CIDR IP range that is permitted to access boot node instance. We recommend that you set this value to a trusted IP range. The value `0.0.0.0/0` permits all IP addresses to access. Additional values can be added post-deployment from the Amazon EC2 console.
    Type: String
    Default: 0.0.0.0/0
  PublicSubnet1ID:
    Description: The ID of the public subnet in Availability Zone 1 for the ELB load balancer (e.g., subnet-9bc642ac).
    Type: String
    Default: "subnet-068bc9661bea107d1"
Resources:
  CPDURL:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value: "CPDURL"
      Description: CP4D URL.
  CPDUSERNAME:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value: "CPDUSERNAME"
      Description: CP4D user name.
  CPDPASSWORD:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value: "CPDPASSWORD"
      Description: CP4D password.
  CPDIAMUser:
    Type: 'AWS::IAM::User'
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
  CPDIAMUserAccessKey:
    Type: 'AWS::IAM::AccessKey'
    Properties:
      UserName: !Ref CPDIAMUser      
  BootNodeIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service:
            - "ec2.amazonaws.com"
          Action:
          - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess
      Policies:
      - PolicyName: bootnode-policy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action: "ec2:Describe*"
            Resource: "*"
          - Effect: "Allow"
            Action: "ec2:AttachVolume"
            Resource: "*"
          - Effect: "Allow"
            Action: "ec2:DetachVolume"
            Resource: "*"
          - Effect: "Allow"
            Action: "route53:*"
            Resource: "*"
          - Effect: "Allow"
            Action:
            - "secretsmanager:GetSecretValue"
            - "secretsmanager:UpdateSecret"
            - "secretsmanager:CreateSecret"
            Resource: "*"
          - Effect: "Allow"
            Action: "s3:ListBucket"
            Resource: !Sub arn:aws:s3:::${ICPDDeploymentLogsBucketName}
          - Effect: "Allow"
            Action: "s3:PutObject"
            Resource: !Sub arn:aws:s3:::${ICPDDeploymentLogsBucketName}/*
          - Effect: Allow
            Action:
            - ssm:SendCommand
            - ssm:PutParameter
            - ssm:GetParameter
            Resource:
            - '*'
  BootnodeInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
      - Ref: "BootNodeIamRole"
  BootnodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster Bootnode Security Group
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref BootNodeAccessCIDR
      VpcId: !Ref VPCID
  BootnodeInstance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          Required:
            - StackPropertiesFile
        StackPropertiesFile:
          files:
            /root/mystack.props:
              content: !Sub |
                AWS_REGION=${AWS::Region}
                AWS_STACKID="${AWS::StackId}"
                AWS_STACKNAME="${AWS::StackName}"
              mode: '000644'
              owner: root
              group: root
            /root/.aws/config:
              content: !Sub |
                [default]
                region=${AWS::Region}
              mode: '000600'
              owner: root
              group: root
            /root/.aws/credentials:
              content: 
                !Sub 
                - |  
                  [default]
                  aws_access_key_id=${CPDIAMUserAccessKey}
                  aws_secret_access_key=${CPDIAMUserSecret}
                - 
                  CPDIAMUserAccessKey: !Ref CPDIAMUserAccessKey 
                  CPDIAMUserSecret: !GetAtt CPDIAMUserAccessKey.SecretAccessKey
              mode: '000600'
              owner: root
              group: root
    Properties:
      KeyName: 'CP4D-Automation-Instance'
      ImageId: 'ami-092b43193629811af'
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 50
            VolumeType: gp2    
      IamInstanceProfile: !Ref BootnodeInstanceProfile
      InstanceType: t3.medium 
      NetworkInterfaces:
      - GroupSet:
        - !Ref BootnodeSecurityGroup
        AssociatePublicIpAddress: true
        DeviceIndex: '0'
        DeleteOnTermination: true
        SubnetId: !Ref PublicSubnet1ID  
      UserData:
        Fn::Base64:
          !Sub 
          - |
            #!/bin/bash -x

            yum update
            yum install -y git
            yum install -y wget
            yum install python38 -y

            git clone https://github.com/aws-quickstart/quickstart-linux-utilities.git
            sed -i "s/aws-cfn-bootstrap-latest.tar.gz/aws-cfn-bootstrap-py3-latest.tar.gz/g" /quickstart-linux-utilities/quickstart-cfn-tools.source 
            export P=/quickstart-linux-utilities/quickstart-cfn-tools.source
            source $P
            
            qs_bootstrap_pip || qs_err " pip bootstrap failed "
            qs_aws-cfn-bootstrap || qs_err "cfn bootstrap failed"
            pip3 install awscli  &> /var/log/userdata.awscli_install.log || qs_err " awscli install failed "
            /usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource BootnodeInstance --configsets Required --region ${AWS::Region}
            sudo cp /usr/local/bin/aws /usr/bin/aws

            cd /tmp
            qs_retry_command 10 wget https://s3-us-west-1.amazonaws.com/amazon-ssm-us-west-1/latest/linux_amd64/amazon-ssm-agent.rpm
            qs_retry_command 10 yum install -y ./amazon-ssm-agent.rpm
            systemctl start amazon-ssm-agent
            systemctl enable amazon-ssm-agent
            rm -f ./amazon-ssm-agent.rpm

            wget https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp/stable/openshift-client-linux.tar.gz
            tar -xvzf openshift-client-linux.tar.gz
            sudo cp oc /usr/local/bin/
            sudo cp oc /usr/bin/
            sudo cp kubectl /usr/local/bin/
            sudo cp kubectl /usr/bin/

            export ICPDInstallationCompletedURL='${ICPDInstallationCompletedHandle}'
            export AWS_REGION=${AWS::Region}
            export AWS_STACKID=${AWS::StackId}
            export AWS_STACKNAME=${AWS::StackName}
            
            oc login -u kubeadmin -p vtTM4-m9Sf4-zrVXY-m3Ekf https://api.cp-deployer46-d01.ibmworkshops.com:6443 --insecure-skip-tls-verify
            oc project zen-46

            
            rm -f cpdurl.txt
            oc get routes | awk  '{ if ($1 == "cpd") { print $2} }' > cpdurl.txt
            export T_CPDURL=$(head -1 cpdurl.txt)
            export T_CPDUSERNAME=kubeadmin
            export T_CPDPWD="$(oc extract secret/admin-user-details --keys=initial_admin_password --to=-)" 

            aws ssm put-parameter --name ${CPDURL} --type "String" --value $T_CPDURL --overwrite
            aws ssm put-parameter --name ${CPDUSERNAME} --type "String" --value $T_CPDUSERNAME --overwrite
            aws ssm put-parameter --name ${CPDPASSWORD} --type "String" --value $T_CPDPWD --overwrite

            ecode=$?
            /usr/local/bin/cfn-signal --exit-code $ecode --id $AWS_STACKID  --data "See logs at ${ICPDDeploymentLogsBucketName}/cpd-bootstrap.log" $ICPDInstallationCompletedURL

          -
            CPDIAMUserAccessKey: !Ref CPDIAMUserAccessKey 
            CPDIAMUserSecret: !GetAtt CPDIAMUserAccessKey.SecretAccessKey
            CPDURL: !Ref CPDURL
            CPDUSERNAME: !Ref CPDUSERNAME
            CPDPASSWORD: !Ref CPDPASSWORD

  ICPDInstallationCompletedHandle:
    Type: AWS::CloudFormation::WaitConditionHandle  

  ICPDInstallationCompleted:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Count: 1
      Handle: !Ref ICPDInstallationCompletedHandle
      Timeout: '40000'            
Outputs:
  CPDURL:
    Description: Cloud pak data url
    Value: !Sub "{{resolve:ssm:${CPDURL}}}"
  CPDUSERNAME:
    Description: Cloud pak data user name
    Value: !Sub "{{resolve:ssm:${CPDUSERNAME}}}"
  CPDPASSWORD:
    Description: Cloud pak data password
    Value: !Sub "{{resolve:ssm:${CPDPASSWORD}}}"  